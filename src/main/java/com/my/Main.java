package com.my;

import com.my.exceptions.ApplicationStopNeedsException;
import com.my.exceptions.AuthenticationException;
import com.my.exceptions.LkNotRespondingException;
import com.my.exceptions.ReloginNeedsException;
import com.my.models.*;
import com.my.services.CipherService;
import com.my.services.ReportsMaker;
import com.my.services.lk.LkParser;
import com.my.services.text.KeyboardLayoutConverter;
import com.my.services.vk.KeyboardService;
import com.my.services.vk.VkBotService;
import com.my.threads.PlannedScheduleSending;
import com.my.threads.PlannedSubjectsUpdate;
import lombok.Getter;
import lombok.NonNull;
import lombok.Setter;

import javax.crypto.NoSuchPaddingException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {

    public static final String APPLICATION_STOP_TEXT = "I WANT TO STOP THE APPLICATION";

    static final GroupsRepository groupsRepository = GroupsRepository.getInstance();
    static final VkBotService vkBot = VkBotService.getInstance();
    static CipherService cipherService;

    static final Map<Integer, String> groupNameByUserId = new HashMap<>();
    @Getter
    static final Map<String, Group> groupByGroupName = new HashMap<>();

    private static final String BASIC_COMMANDS =
                    "üî∑ –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:\n" +
                    "–ü—Ä–µ–¥–º–µ—Ç—ã\n" +
                    "üî∑ –£–∑–Ω–∞—Ç—å —Å–∞–º—É—é —Å–≤–µ–∂—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –∏–∑ –õ–ö:\n" +
                    "n (n - –Ω–æ–º–µ—Ä –≤ –º–æ–µ–º —Å–ø–∏—Å–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤)\n" +
                    "üî∂ –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:\n" +
                    "–ö–æ–º–∞–Ω–¥—ã\n" +
                    "üî∂ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∏–ª–∏ —Å–º–µ–Ω–∏—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:\n" +
                    "–ó–∞–±—É–¥—å –º–µ–Ω—è";

    private static final String AUTH_COMMAND =
            "(—Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å—Ä–∞–∑—É —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ):\n" +
                    "–•–æ—á—É –≤–æ–π—Ç–∏ –≤ –õ–ö\n" +
                    "–ú–æ–π_–ª–æ–≥–∏–Ω\n" +
                    "–ú–æ–π_–ø–∞—Ä–æ–ª—å";

    static final int APP_ADMIN_ID = 173315241;

    private static final Pattern groupNamePatternOnlyUpperCase =
            Pattern.compile("((–¢9?|–û–ó|–û–ó–ú|–ú)-)?([A-–Ø]{1,4}-)(–ü-)?\\d{2}(-\\d)?");

    @Getter @Setter
    private volatile static String actualSemester;
    private static boolean isActualWeekWhite;

    public static void main (String[] args)
            throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeySpecException {

        cipherService = CipherService.getInstance();
        actualSemester = Utils.getSemesterName();
        fillCaches();
        try {
            actualizeWeekType();
        } catch (Exception e) {
            e.printStackTrace();
        }

        final var plannedSubjectsUpdate = new PlannedSubjectsUpdate();
        plannedSubjectsUpdate.start();
        final var plannedScheduleSending = new PlannedScheduleSending();
        plannedScheduleSending.start();

        vkBot.setOnline(true);
        vkBot.sendMessageTo(APP_ADMIN_ID,
                "APP STARTED.\nTO STOP TYPE: "+ APPLICATION_STOP_TEXT);
        try {
            runCycle();
        } catch (ApplicationStopNeedsException ignored) {}

        vkBot.setOnline(false);
        plannedSubjectsUpdate.interrupt();
        plannedScheduleSending.interrupt();
        vkBot.sendMessageTo(APP_ADMIN_ID, "WARNING: APP STOPPED");
    }

    private static void fillCaches() {
        groupsRepository.findAll()
                .forEach(group -> {
                    groupByGroupName.put(group.getName(), group);
                    group.setLkParser(new LkParser());
                });

        groupByGroupName.values().forEach(group -> {
            if (!group.isLoggedBefore())
                return;

            final var groupName = group.getName();
            group.getUsers()
                    .forEach(user -> groupNameByUserId.put(user.getId(), groupName));
            group.getLoginWaitingUsers()
                    .forEach(userId -> groupNameByUserId.put(userId, groupName));
        });
    }

    private static void runCycle () {
        while (true) {
            vkBot.getNewMessages().forEach(message -> {
                final Integer userId = message.getFromId();
                final var messageText = message.getText();
                if (userId.equals(APP_ADMIN_ID) && messageText.equals(APPLICATION_STOP_TEXT))
                    throw new ApplicationStopNeedsException();
                try {
                    Thread.sleep(10); // –ß—Ç–æ–±—ã –Ω–µ –¥–¥–æ—Å–∏–ª–∏ –õ–ö
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                if (userId > 0) {
                    // TODO –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, —Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏–µ
                    if (messageText.length() > 100)
                        vkBot.sendMessageTo(userId,
                                "–¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–ø–∞–º.\n –ù–∞–ø–∏—à–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É");
                    CompletableFuture.runAsync(() -> {
                        try {
                            executeBotDialog(userId, messageText);

                        } catch (AuthenticationException e) {
                            loginFailedMessages(userId, groupByGroupName.get(groupNameByUserId.get(userId)));

                        } catch (ReloginNeedsException e) {
                            login(groupByGroupName.get(groupNameByUserId.get(userId)));
                            executeBotDialog(userId, messageText);

                        } catch (LkNotRespondingException e) {
                            vkBot.sendMessageTo(userId, "–ö–∞–∂–µ—Ç—Å—è –õ–ö —Å–µ–π—á–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π —ç—Ç–æ –ø–æ–∑–∂–µ");
                        } catch (Exception e) {
                            vkBot.sendMessageTo(userId, "–Ø –Ω–µ –ø–æ–Ω—è–ª —Ç–µ–±—è –∏–ª–∏ –æ—à–∏–±—Å—è —Å–∞–º.");
                            e.printStackTrace();
                        }
                    });
                }
            });
        }
    }

    private static void executeBotDialog (Integer userId, String messageText) {
        messageText = KeyboardLayoutConverter.translateFromEnglishLayoutIfNeeds(messageText);
//        SpecialWordsFinder.findSpecialWords(userId, messageText);

        final var groupNameMatcher =
                groupNamePatternOnlyUpperCase.matcher(messageText.toUpperCase());
        if (groupNameMatcher.find()) { // –Ø –∏–∑ –ü–ò-19-1 –∏ —Ç–¥.
            newUserGroupCheck(userId, messageText, groupNameMatcher);
            return;

        } else if (messageText.startsWith("–•–æ—á—É –≤–æ–π—Ç–∏ –≤ –õ–ö")) {
            onLoginMessages(userId, groupNameByUserId.get(userId), messageText);
            return;
        }

        if (!groupNameByUserId.containsKey(userId)) {
            vkBot.sendMessageTo(userId,
                    "–ù–∞–ø–∏—à–∏ –∏–∑ –∫–∞–∫–æ–π —Ç—ã –≥—Ä—É–ø–ø—ã (—Ç–∞–∫ –∂–µ, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –õ–ö). –ù–∞–ø—Ä–∏–º–µ—Ä:\n" +
                            "–Ø –∏–∑ –ü–ò-19-1");
            return;
        }

        final var groupName = groupNameByUserId.get(userId);
        final var optionalGroup = Optional.ofNullable(groupByGroupName.get(groupName));

        messageText = messageText.toLowerCase();
        switch (messageText) {
            case "—è –≥–æ—Ç–æ–≤ –Ω–∞ –≤—Å–µ —Ä–∞–¥–∏ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã!":
                if (optionalGroup.map(Group::isNotLoggedNow).orElse(true)) {
                    vkBot.unsetKeyboard();
                    vkBot.sendMessageTo(userId,
                            "–•–æ—Ä–æ—à–æ, —Å–º–µ–ª—å—á–∞–∫. –ü–∏—à–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤–æ—Ç —Ç–∞–∫ " +
                                    AUTH_COMMAND);
                } else
                    groupAlreadyRegisteredMessage(userId);
                return;

            case "–ª—É—á—à–µ —Å–∫–∞–∂—É –¥—Ä—É–≥–æ–º—É":
                if (optionalGroup.map(Group::isNotLoggedNow).orElse(true)) {
                    vkBot.unsetKeyboard();
                    groupNameByUserId.remove(userId);
                    vkBot.sendMessageTo(userId,
                            "–•–æ—Ä–æ—à–æ. –ù–∞–ø–∏—à–∏ –º–Ω–µ, –∫–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ –∏–∑ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –∑–∞–π–¥–µ—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—è");
                } else
                    groupAlreadyRegisteredMessage(userId);
                return;

            case "—è –æ—à–∏–±—Å—è –ø—Ä–∏ –≤–≤–æ–¥–µ –≥—Ä—É–ø–ø—ã":
                if (optionalGroup.map(group -> group.containsUser(userId)).orElse(false)) {
                    vkBot.sendMessageTo(userId, "–ù–∞–ø–∏—à–∏ \"–ó–∞–±—É–¥—å –º–µ–Ω—è\", —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–π—Ç–∏ –≤ –º–µ–Ω—è");
                } else {
                    vkBot.unsetKeyboard();
                    groupNameByUserId.remove(userId);
                    vkBot.sendMessageTo(userId,
                            "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –≥—Ä—É–ø–ø—ã (—Ç–∞–∫ –∂–µ, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –õ–ö). –ù–∞–ø—Ä–∏–º–µ—Ä:\n" +
                                    "–Ø –∏–∑ –ü–ò-19-1");
                }
                return;
            default: break;
        }

        if (optionalGroup.isEmpty()) {
            vkBot.sendMessageTo(userId, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ—Ç –∏–º–µ–Ω–∏ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã");
            return;
        }
        final var group = optionalGroup.get();
        final LoggedUser loggedUser = group.getLoggedUser();

        Integer integer = Utils.tryParseInteger(messageText);
        if (integer != null) {
            if (group.containsUser(userId) && integer < 100) { // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ (—Å –∑–∞–ø–∞—Å–æ–º)
                login(group);
                getActualSubjectMessage(userId, group, integer);
            }

            else if (!group.containsUser(userId) && 100_000 <= integer && integer < 1_000_000) // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥
                addUserByVerificationCode(group, userId, integer);

            else vkBot.sendMessageTo(userId, "–Ø –Ω–µ –ø–æ–Ω—è–ª —Ç–µ–±—è");
            return;
        }

        if (!group.containsUser(userId)) {
            vkBot.sendMessageTo(userId,
                    "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Å—å –∫ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø–µ");
            return;
        }

        if (messageText.startsWith("–∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ ")) {
            if (loggedUser.is(userId)) {
                final var minutes = Long.parseLong(messageText.substring(21));
                if (10 <= minutes && minutes <= 20160) {
                    final long newUpdateInterval = minutes * 60 * 1000;

                    groupsRepository.updateField(groupName,"updateInterval", newUpdateInterval);
                    group.setUpdateInterval(newUpdateInterval);

                    vkBot.sendMessageTo(userId, "–ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω");
                    group.setUpdateInterval(newUpdateInterval);
                    nextUpdateDateMessage(userId, group.getNextCheckDate());
                } else
                    vkBot.sendMessageTo(userId, "–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–∫–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
            } else
                userInsufficientPermissionsMessage(userId);
            return;

        } else if (messageText.startsWith("—Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º —Å ")) { // –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º —Å n –ø–æ k
            if (loggedUser.is(userId)) {
                final String[] strings = messageText.split(" ");
                final var startHour = Integer.parseInt(strings[3]);
                final var endHour = Integer.parseInt(strings[5]);
                if (!(0 <= startHour && startHour <= 23 && 0 <= endHour && endHour <= 23)) {
                    vkBot.sendMessageTo(userId, "–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞");
                } else {
                    groupsRepository.updateSilentMode(groupName, startHour, endHour);
                    group.setSilentModeStart(startHour).setSilentModeEnd(endHour);

                    vkBot.sendMessageTo(userId, "–í—Ä–µ–º—è —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏–∑–º–µ–Ω–µ–Ω–æ");
                }
            } else userInsufficientPermissionsMessage(userId);
            return;
        }

        switch (messageText) {
            case "–ø—Ä–µ–¥–º–µ—Ç—ã":
                vkBot.sendMessageTo(userId, ReportsMaker.getSubjectsNames(group.getSubjects()));
                break;

            case "–∫–æ–º–∞–Ω–¥—ã":
                vkBot.sendMessageTo(userId,
                        KeyboardService.getCommands(userId, group),
                        getUserCommands(userId, group));
                break;

            case "–ø—Ä–∏—Å—ã–ª–∞–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
                changeUserSchedulingEnable(userId, group, true);
                break;

            case "–Ω–µ –ø—Ä–∏—Å—ã–ª–∞–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
                changeUserSchedulingEnable(userId, group, false);
                break;

            case "–±–µ–∑ –ø—É—Å—Ç—ã—Ö –æ—Ç—á–µ—Ç–æ–≤":
                changeLoggedUserNotifying(userId, group, false);
                break;

            case "—Å –ø—É—Å—Ç—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏":
                changeLoggedUserNotifying(userId, group, true);
                break;

            case "–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
                if (group.getLoggedUser().is(userId)) {
                    login(group);

                    final Timetable timetable = group.getLkParser().parseTimetable(group.getLkSemesterId(), group.getLkId());
                    groupsRepository.updateField(groupName,"timetable", timetable);
                    group.setTimetable(timetable);

                    vkBot.sendMessageTo(group.getLoggedUser().getId(), "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
                } else
                    userInsufficientPermissionsMessage(userId);
                break;

            case "–∑–∞–±—É–¥—å –º–µ–Ω—è":
                if (loggedUser.is(userId))
                    vkBot.sendMessageTo(userId,
                            "‚û° –≠—Ç–∞ –æ–ø—Ü–∏—è –ø–æ–ª–µ–∑–Ω–∞, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞, " +
                                    "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –µ—Å–ª–∏ —è —Ç–µ–±–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω. " +
                                    "–ü–æ—Å–ª–µ —Ç–≤–æ–µ–≥–æ —É—Ö–æ–¥–∞ –∫–æ–º—É-—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–∫–∞–∑–∞—Ç—å –º–Ω–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç —Å–≤–æ–µ–≥–æ –õ–ö, " +
                                    "–µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ–π. " +
                                    "‚û° –ï—Å–ª–∏ —Ç—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—Å–µ –¥–µ–ª–∞–µ—à—å, —Ç–æ –Ω–∞–ø–∏—à–∏:\n" +
                                    "–Ø —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á—É, —á—Ç–æ–±—ã —Ç—ã –∑–∞–±—ã–ª –º–µ–Ω—è");
                else
                    vkBot.sendMessageTo(userId,
                            "‚û° –≠—Ç–∞ –æ–ø—Ü–∏—è –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–∞ —Ç–µ–±–µ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã –ø–æ—Å–ª–µ —Ç–æ–≥–æ, " +
                                    "–∫–∞–∫ —è –∑–∞–±—ã–ª –¥—Ä—É–≥–æ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã, " +
                                    "–∏–ª–∏ –µ—Å–ª–∏ —è —Ç–µ–±–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω. \n" +
                                    "‚û° –ï—Å–ª–∏ —Ç—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—Å–µ –¥–µ–ª–∞–µ—à—å, —Ç–æ –Ω–∞–ø–∏—à–∏:\n" +
                                    "–Ø —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á—É, —á—Ç–æ–±—ã —Ç—ã –∑–∞–±—ã–ª –º–µ–Ω—è");
                break;

            case "—è —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á—É, —á—Ç–æ–±—ã —Ç—ã –∑–∞–±—ã–ª –º–µ–Ω—è":
                vkBot.unsetKeyboard();
                if (loggedUser.is(userId)) {
                    vkBot.sendMessageTo(userId,
                            "–•–æ—Ä–æ—à–æ. –†–µ–∫–æ–º–µ–Ω–¥—É—é —Ç–µ–±–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–∞—Ä–æ–ª—å –≤ –õ–ö (http://lk.stu.lipetsk.ru).\n" +
                                    "–Ø —Ç–µ–±—è –∑–∞–±—ã–ª. \uD83D\uDC4B\uD83C\uDFFB");

                    groupsRepository.removeLoggedUser(groupName, loggedUser.getId());
                    group.removeLoggedUser(loggedUser.getId());

                } else
                    vkBot.sendMessageTo(userId,"–•–æ—Ä–æ—à–æ. –Ø —Ç–µ–±—è –∑–∞–±—ã–ª. \uD83D\uDC4B\uD83C\uDFFB");
                groupNameByUserId.remove(userId);
                groupsRepository.removeUserFromGroup(groupName, userId);
                group.removeUserFromGroup(userId);
                break;

            default:
                vkBot.sendMessageTo(userId, "–Ø –Ω–µ –ø–æ–Ω—è–ª —Ç–µ–±—è");
                break;
        }
    }

    public static boolean login(Group group) {
        return group.getLkParser()
                .login(cipherService.decrypt(group.getLoggedUser().getAuthData()));
    }

    private static void addUserByVerificationCode (Group group, Integer userId, Integer code) {
        final UserToVerify userToVerify = new UserToVerify(userId, code);
        if (groupsRepository.moveVerifiedUserToUsers(group.getName(), userToVerify)) {
            group.moveVerifiedUserToUsers(userToVerify);
            vkBot.sendMessageTo(group.getLoggedUser().getId(),
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "+vkBot.getUserName(userId)+" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É");
            vkBot.sendMessageTo(userId, "–Ø –¥–æ–±–∞–≤–∏–ª —Ç–µ–±—è –≤ –≥—Ä—É–ø–ø—É "+group.getName());
            newUserSubjectsListMessage(userId, group);
        } else {
            vkBot.sendMessageTo(userId, "–¢—ã –≤–≤–µ–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞");
        }
    }

    private static void newUserGroupCheck (Integer userId, String messageText, Matcher groupNameMatcher) {
        if (groupNameByUserId.containsKey(userId)) {
            vkBot.sendMessageTo(userId, "–Ø —É–∂–µ –∑–Ω–∞—é, —á—Ç–æ —Ç—ã –∏–∑ " + groupNameByUserId.get(userId));
            return;
        }

        final String groupName = messageText.substring(groupNameMatcher.start(), groupNameMatcher.end());
        groupNameByUserId.put(userId, groupName);

        final var optionalGroup = Optional.ofNullable(groupByGroupName.get(groupName));

        if (!optionalGroup.map(Group::isLoggedBefore).orElse(false)) {
            vkBot.sendMessageTo(userId, "–Ø –Ω–µ –∑–Ω–∞—é –≥—Ä—É–ø–ø—ã " + groupName);
            newUserMessage(userId);
            return;
        }
        if (optionalGroup.map(Group::isNotLoggedNow).orElse(false)) {
            vkBot.sendMessageTo(userId,
                    "–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –±—ã–ª —á–µ–ª–æ–≤–µ–∫, –≤–æ—à–µ–¥—à–∏–π –æ—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏, –Ω–æ —Ç–µ–ø–µ—Ä—å –µ–≥–æ –Ω–µ—Ç. " +
                            "–¢—ã —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å –∏–º?\n");
            newUserMessage(userId);
            return;
        }

        Group group = optionalGroup.get();
        vkBot.sendMessageTo(userId, KeyboardService.KEYBOARD_2, "–û, —è –∑–Ω–∞—é —ç—Ç—É –≥—Ä—É–ø–ø—É!");

        final Integer verificationCode = Utils.generateVerificationCode();

        final UserToVerify userToVerify = new UserToVerify(userId, verificationCode);
        if (groupsRepository.addUserToUsersToVerify(group.getName(), userToVerify)) {
            group.getUsersToVerify().add(userToVerify);

            vkBot.sendMessageTo(group.getLoggedUser().getId(),
                    "–ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "+
                            vkBot.getUserName(userId)+": "+ verificationCode);
            vkBot.sendMessageTo(userId, "–°–∫–∞–∂–∏ –º–Ω–µ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥, –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π –ª–∏–¥–µ—Ä—É —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã");
        } else
            vkBot.sendMessageTo(userId, "–Ø —É–∂–µ –ø—Ä–∏—Å—ã–ª–∞–ª –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥ –ª–∏–¥–µ—Ä—É —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã");
    }

    private static void newUserMessage (Integer userId) {
        vkBot.sendMessageTo(userId, KeyboardService.KEYBOARD_1,
                "‚û° –ú–Ω–µ –Ω—É–∂–Ω—ã —Ç–≤–æ–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é " +
                        "–¥–ª—è —Ç–µ–±—è –∏ —Ç–≤–æ–∏—Ö –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–æ–≤.\n" +
                        "–ú–æ–∂–µ—à—å –º–Ω–µ –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è ;-)\n" +
                        "‚û° –ï—Å–ª–∏ —Ç—ã –º–Ω–µ –Ω–µ –¥–æ–≤–µ—Ä—è–µ—à—å, —Ç–æ –ø–æ–∑–≤–æ–ª—å –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –∏–∑ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã. " +
                        "–û–±–µ—â–∞—é –Ω–µ –ø–∏—Å–∞—Ç—å —Ç–µ–±–µ, –∫–æ–≥–¥–∞ –≤ —ç—Ç–æ–º –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.\n\n" +
                        "‚û° –í—Å–µ –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏ –≤ –≥—Ä—É–ø–ø–µ:\nhttps://vk.com/dorimelk");
    }

    private static void newUserSubjectsListMessage (Integer userId, Group group) {
        vkBot.sendMessageTo(userId,
                "–¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–±–µ –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –õ–ö –ø–æ –¥–∞–Ω–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º:\n" +
                        ReportsMaker.getSubjectsNames(group.getSubjects()));

        group.getUsers().add(new GroupUser(userId));
        vkBot.sendMessageTo(userId, KeyboardService.getCommands(userId, group),
                "–¢–∞–∫–∂–µ —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:\n" + getUserCommands(userId, group));
    }

    private static String getUserCommands (Integer userId, Group group) {
        final LoggedUser loggedUser = group.getLoggedUser();

        if (loggedUser.is(userId))
            return BASIC_COMMANDS +
                    "\nüî∂ –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–π—á–∞—Å —Ä–∞–∑ –≤ " +
                    group.getUpdateInterval() / 60000 + " –º–∏–Ω—É—Ç):\n" + // –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ
                    "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ n (n - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç [10, 20160])\n"
                    +
                    "üî∂ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞ (—Å–µ–π—á–∞—Å —Å " +
                    group.getSilentModeStart() + " –¥–æ " + group.getSilentModeEnd() + " —á–∞—Å–æ–≤):\n" +
                    "–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º —Å n –ø–æ k (–≤–º–µ—Å—Ç–æ n –∏ k —á–∏—Å–ª–∞ [0, 23])\n"
                    +
                    (loggedUser.isAlwaysNotify() ?
                            "üî∂ –ù–µ –ø–∏—Å–∞—Ç—å —Ç–µ–±–µ, –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n–ë–µ–∑ –ø—É—Å—Ç—ã—Ö –æ—Ç—á–µ—Ç–æ–≤\n" :
                            "üî∂ –ü–∏—Å–∞—Ç—å —Ç–µ–±–µ, –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n–° –ø—É—Å—Ç—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏")
                    +
                    "üî∂ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –õ–ö –¥–ª—è –≥—Ä—É–ø–ø—ã:\n" +
                    "–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ";

        else {
            return BASIC_COMMANDS + "\n" +
                    (group.getUserSchedulingEnabled(userId) ?
                                    "üî∂ –ù–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n–ù–µ –ø—Ä–∏—Å—ã–ª–∞–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" :
                                    "üî∂ –ü—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n–ü—Ä–∏—Å—ã–ª–∞–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ");
        }
    }

    private static void groupAlreadyRegisteredMessage (Integer userId) {
        vkBot.sendMessageTo(userId,
                "–û–π, –ø–æ—Ö–æ–∂–µ —Ç—ã –æ–ø–æ–∑–¥–∞–ª! –≠—Ç—É –≥—Ä—É–ø–ø—É —É–∂–µ —É—Å–ø–µ–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å.");
    }

    private static void changeUserSchedulingEnable(Integer userId, Group group, boolean isEnable) {
        groupsRepository.updateUserScheduling(group.getName(), userId, isEnable);
        group.getUsers().stream()
                .filter(user -> user.getId().equals(userId))
                .findFirst().get()
                .setEverydayScheduleEnabled(isEnable);

        vkBot.sendMessageTo(userId, KeyboardService.getCommands(userId, group),"–•–æ—Ä–æ—à–æ");
        if (isEnable) {
            final String dayScheduleReport = getDayScheduleReport(Utils.mapWeekDayFromCalendar(), group);
            if (!dayScheduleReport.isEmpty())
                vkBot.sendMessageTo(userId, "–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ;-)\n"+
                        dayScheduleReport);
        }
    }

    public static String getDayScheduleReport(int weekDay, Group group) {
        return ReportsMaker.getDaySchedule(isActualWeekWhite ?
                        group.getTimetable().getWhiteWeekDaySubjects().get(weekDay) :
                        group.getTimetable().getGreenWeekDaySubjects().get(weekDay),
                isActualWeekWhite);
    }

    private static void changeLoggedUserNotifying (Integer userId, Group group, boolean isEnable) {
        if (group.getLoggedUser().is(userId)) {
            groupsRepository.updateField(group.getName(), "loggedUser.alwaysNotify", isEnable);
            group.getLoggedUser().setAlwaysNotify(isEnable);
            vkBot.sendMessageTo(userId, KeyboardService.getLoggedUserCommands(group),"–•–æ—Ä–æ—à–æ");
        } else
            userInsufficientPermissionsMessage(userId);
    }

    private static void nextUpdateDateMessage (Integer userId, Date nextCheckDate) {
        nextUpdateDateMessage(Collections.singletonList(userId), nextCheckDate);
    }

    private static void nextUpdateDateMessage (Collection<Integer> userIds, Date nextCheckDate) {
        vkBot.sendMessageTo(userIds, ReportsMaker.getNextUpdateDateText(nextCheckDate));
    }

    private static void userInsufficientPermissionsMessage (Integer userId) {
        vkBot.sendMessageTo(userId,
                "–Ø —Ä–∞–∑—Ä–µ—à–∞—é —ç—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫—É, –≤–æ—à–µ–¥—à–µ–º—É –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã");
    }

    private static void getActualSubjectMessage (Integer userId, Group group, Integer subjectIndex) {
        final var optionalSubject = group.getSubjects().stream()
                .filter(subject1 -> subject1.getId() == subjectIndex)
                .findFirst();
        if (optionalSubject.isEmpty()) {
            vkBot.sendMessageTo(userId, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞");
            return;
        }
        final var oldSubject = optionalSubject.get();

        Subject newSubject = group.getLkParser().getNewSubject(oldSubject, group);

        newSubject.setId(subjectIndex);
        newSubject.getDocumentNames()
                .removeAll(oldSubject.getDocumentNames());

        if (newSubject.isNotEmpty()) {
            vkBot.sendLongMessageTo(userId,
                    ReportsMaker.getSubjects(List.of(newSubject), null));
        } else {
            vkBot.sendMessageTo(userId,
                    "–ù–µ—Ç –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É " + newSubject.getName());
        }
    }

    private static void newGroupLoginFailedMessages (Integer userId) {
        vkBot.sendMessageTo(userId,
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. \n" +
                "–õ–∏–±–æ —Ç–≤–æ–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, –ª–∏–±–æ —è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Ö –ø—Ä–æ—á–∏—Ç–∞–ª");
    }

    private static void loginFailedMessages(Integer userId, Group group) {
        String groupName = group.getName();
        LoggedUser loggedUser = group.getLoggedUser();

        final boolean isNotLoggedUser = !loggedUser.is(userId);
        if (isNotLoggedUser) {
            vkBot.sendMessageTo(userId,
                    "‚û° –ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã. " +
                            "–ß–µ–ª–æ–≤–µ–∫, –≤–æ—à–µ–¥—à–∏–π –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã, –Ω–µ —Å–∫–∞–∑–∞–ª –º–Ω–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç –õ–ö –∏–ª–∏ –≤—ã—à–µ–ª. " +
                            "–Ø —Å–∫–∞–∂—É –µ–º—É –æ–± —ç—Ç–æ–º —Å–∞–º, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤—ã—à–µ–ª.");
            groupsRepository.addToIntegerArray(groupName, "loginWaitingUsers", userId);
            group.getLoginWaitingUsers().add(userId);
        }
        rememberUpdateAuthDataMessage(group, loggedUser, groupName, isNotLoggedUser);
    }

    public static void rememberUpdateAuthDataMessage (Group group,
                                                       @NonNull LoggedUser loggedUser,
                                                       @NonNull String groupName,
                                                       boolean anywayRemember) {
        if (anywayRemember || !loggedUser.isUpdateAuthDataNotified()) {
            vkBot.sendMessageTo(loggedUser.getId(),
                    "‚û° –ü–æ—Ö–æ–∂–µ —Ç—ã –∑–∞–±—ã–ª —Å–∫–∞–∑–∞—Ç—å –º–Ω–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –õ–ö." +
                            "–°–∫–∞–∂–∏ –º–Ω–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ —Ç–∞–∫ " +
                            AUTH_COMMAND);

            groupsRepository.updateField(groupName, "loggedUser.updateAuthDataNotified", true);
            loggedUser.setUpdateAuthDataNotified(true);
        }
    }

    private static void onLoginMessages (Integer userId, @NonNull String groupName, String messageText) {
        final String[] chunks = messageText.split("\n");
        String login = chunks[1];
        String password = chunks[2];

        vkBot.sendMessageTo(userId, "–ü—Ä–æ–±—É—é –∑–∞–π—Ç–∏ –≤ —Ç–≤–æ–π –õ–ö...");
        final LkParser lkParser = new LkParser();
        if (!lkParser.login(new AuthenticationData(login, password))) {
            newGroupLoginFailedMessages(userId);
            return;
        }
        vkBot.sendMessageTo(userId, "–Ø —É—Å–ø–µ—à–Ω–æ –∑–∞—à–µ–ª –≤ —Ç–≤–æ–π –õ–ö");
        //vkBotService.deleteLastMessage(message);

        groupName = actualizeGroupName(userId, groupName, lkParser);

        var optionalGroup = Optional.ofNullable(groupByGroupName.get(groupName));
        if (optionalGroup.isEmpty()) {
            newGroupLoggedMessages(userId, groupName, login, password, lkParser);
            return;
        }
        final var group = optionalGroup.get();
        if (!group.isLoggedBefore())
            return;

        if (!group.isNotLoggedNow() && !group.getLoggedUser().is(userId)) {
            groupAlreadyRegisteredMessage(userId);
            return;
        }

        final LoggedUser loggedUser = new LoggedUser()
                .setId(userId)
                .setAuthData(cipherService.encrypt(login, password))
                .setUpdateAuthDataNotified(false);

        groupsRepository.updateLoggedUser(group.getName(), loggedUser);
        group.setLoggedUser(loggedUser);
        group.getUsers().add(new GroupUser(userId));

        groupsRepository.moveLoginWaitingUsersToUsers(group.getName());
        vkBot.sendMessageTo(group.getLoginWaitingUsers(),
                "–ß–µ–ª–æ–≤–µ–∫ –∏–∑ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –∑–∞—à–µ–ª –≤ –õ–ö —á–µ—Ä–µ–∑ –º–µ–Ω—è");
    }

    private static String actualizeGroupName(Integer userId, String groupName, LkParser lkParser) {
        final var optionalLkGroupName = lkParser.getGroupName();
        if (optionalLkGroupName.isEmpty())
            return groupName;

        final var lkGroupName = optionalLkGroupName.get();
        if (lkGroupName.equals(groupName))
            return groupName;

        vkBot.sendMessageTo(userId,
                "\uD83D\uDD34 –Ø –ø–æ–º–µ–Ω—è–ª –∏–º—è –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Ç–æ–±–æ–π –≥—Ä—É–ø–ø—ã "+ groupName +" –Ω–∞: "+lkGroupName+
                        ", —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π. \uD83D\uDD34");
        groupNameByUserId.replace(userId, lkGroupName);
        return lkGroupName;
    }

    private static void newGroupLoggedMessages(Integer userId, @NonNull String groupName,
                                               String login, String password, LkParser lkParser) {
        vkBot.sendMessageTo(userId, "–£—Ä–∞. –¢–µ–ø–µ—Ä—å —è –ø–æ—Ö–∏—â—É –≤—Å–µ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)");
        vkBot.sendMessageTo(userId,
                "–û–π, –∏–∑–≤–∏–Ω–∏, —Å–ª—É—á–∞–π–Ω–æ –≤—ã—Ä–≤–∞–ª–æ—Å—å)\n" +
                        "‚û° –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∏ —Ç–≤–æ–∏–º –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –∏–∑ –õ–ö. " +
                        "–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∑–≤–∞—Ç—å –∏—Ö –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π. " +
                        "–ù–æ –ø–æ–∑–≤–æ–ª—å —è —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—é —Ç–≤–æ–π –õ–ö...");

        List<Subject> newSubjects = lkParser.getSubjectsFirstTime(actualSemester);
        final var newGroup = new Group(groupName)
                .setLoggedUser(new LoggedUser().setId(userId).setAuthData(cipherService.encrypt(login, password)))
                .setSubjects(newSubjects)
                .setLastCheckDate(new Date());
        newGroup.getUsers().add(new GroupUser(userId));

        final Map<String, String> lkIds = lkParser.getSubjectsGeneralLkIds(actualSemester);
        newGroup.setLkIds(
                lkIds.get(LkParser.SEMESTER_ID),
                lkIds.get(LkParser.GROUP_ID),
                lkIds.get(LkParser.CONTINGENT_ID)
        );

        newUserSubjectsListMessage(userId, newGroup);
        vkBot.sendLongMessageTo(userId, "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: \n" +
                ReportsMaker.getSubjects(newSubjects, newGroup.getNextCheckDate()));

        newGroup.setTimetable(lkParser.parseTimetable(newGroup.getLkSemesterId(), newGroup.getLkId()));

        groupsRepository.insert(newGroup);
        groupByGroupName.put(groupName, newGroup);
    }

    public static void actualizeWeekType() throws AuthenticationException {
        Optional.ofNullable(groupByGroupName.get("–ü–ò-19-1"))
                .ifPresentOrElse(group -> {
                    final LkParser lkParser = new LkParser();
                    if (lkParser.login(cipherService.decrypt(group.getLoggedUser().getAuthData())))
                        isActualWeekWhite = lkParser.parseWeekType(group.getLkSemesterId());
                    else {
                        vkBot.sendMessageTo(APP_ADMIN_ID, "–°—Ä–æ—á–Ω–æ —Å–∫–∞–∂–∏ –º–Ω–µ —Å–≤–æ–π –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å.");
                        throw new AuthenticationException("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∏–ø–∞ –Ω–µ–¥–µ–ª–∏.");
                    }

                }, () -> vkBot.sendMessageTo(APP_ADMIN_ID,
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–≤–æ—é –≥—Ä—É–ø–ø—É. –í–æ–π–¥–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞."));
    }

    // TODO –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    //  –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ –∏ –ø–æ—Ö–≤–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
    //  –ü–æ–ª—É—á–∏—Ç—å 1–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —á–∞—Å–æ–≤ –Ω–∞ heroku (–ø–æ–∫–∞ —á—Ç–æ –Ω–µ –≤—ã—à–ª–æ)
    //  –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—Ö–æ–¥–∞ (–ø–æ–∫–∞ —á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —Ö–æ—Ç—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫–∞–º –º–æ–∂–Ω–æ)

    // TODO –î–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±–æ—Ç–∞:
    //  –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ª–∫ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
}
