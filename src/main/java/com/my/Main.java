package com.my;

import com.my.models.AuthenticationData;
import com.my.models.Group;
import com.my.models.LoggedUser;
import com.my.models.SubjectData;
import com.my.services.ButtonsCreator;
import com.my.services.LstuAuthService;
import com.my.services.LstuParser;
import com.my.services.VkBotService;
import com.vk.api.sdk.objects.messages.Message;
import lombok.NonNull;
import lombok.SneakyThrows;

import javax.crypto.NoSuchPaddingException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {

    static final GroupsRepository groupsRepository = GroupsRepository.getInstance();
    static CipherService cipherService = null;
    static final VkBotService vkBotService = VkBotService.getInstance();
    static final LstuAuthService lstuAuthService = new LstuAuthService();
    static final LstuParser lstuParser = new LstuParser();

    static final Map<Integer, String> groupNameByUserId = new HashMap<>();

    private static final String BASIC_COMMANDS =
                    "üî∑ –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:\n" +
                    "–ü—Ä–µ–¥–º–µ—Ç—ã\n" +
                    "üî∑ –£–∑–Ω–∞—Ç—å —Å–∞–º—É—é —Å–≤–µ–∂—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –∏–∑ –õ–ö:\n" +
                    "n (n - –Ω–æ–º–µ—Ä –≤ –º–æ–µ–º —Å–ø–∏—Å–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤)\n" +
                    "üî∂ –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:\n" +
                    "–ö–æ–º–∞–Ω–¥—ã\n" +
                    "üî∂ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∏–ª–∏ —Å–º–µ–Ω–∏—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:\n" +
                    "–ó–∞–±—É–¥—å –º–µ–Ω—è";

    private static final String AUTH_COMMAND =
            "(—Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å—Ä–∞–∑—É —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ):\n" +
                    "–•–æ—á—É –≤–æ–π—Ç–∏ –≤ –õ–ö\n" +
                    "–ú–æ–π_–ª–æ–≥–∏–Ω\n" +
                    "–ú–æ–π_–ø–∞—Ä–æ–ª—å";

    static final int ADMIN_VK_ID = 173315241;

    private static final Pattern groupNamePatternOnlyUpperCase =
            Pattern.compile("((–¢9?|–û–ó|–û–ó–ú|–ú)-)?([A-–Ø]{1,4}-)(–ü-)?\\d{2}(-\\d)?");

    private static String actualSemester;

    private static class PlannedSubjectsDataUpdate extends Thread {
        @SneakyThrows
        @Override
        public void run() {
            while (true) {
                try {
                    Thread.sleep(60L * 1000); // 1 –º–∏–Ω—É—Ç–∞
                    final var newSemester = Utils.getNewScannedSemesterName();

                    for (Group group : groupsRepository.findAll()) {
                        LoggedUser loggedUser = group.getLoggedUser();


                        final GregorianCalendar calendar = new GregorianCalendar();
                        final var checkDate = calendar.getTime();
                        if (isSilentTime(group, calendar.get(Calendar.HOUR_OF_DAY)) ||
                                !checkDate.after(group.getNextCheckDate())) {
                            continue;
                        }

                        if (!group.isNotLoggedNow() &&
                                !lstuAuthService.login(cipherService.decrypt(loggedUser.getAuthData()))) {
                            vkBotService.sendMessageTo(loggedUser.getId(),
                                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –õ–ö –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–∏—á–∏–Ω–µ:\n" +
                                            "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞");
                            continue;
                        }
                        vkBotService.sendMessageTo(loggedUser.getId(), "–ù–∞—á–∞–ª–æ—Å—å –ø–ª–∞–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ");

                        final var oldSubjectsData = group.getSubjectsData();

                        final List<SubjectData> newSubjectsData;

                        if (actualSemester.equals(newSemester))
                            newSubjectsData = lstuParser.getNewSubjectsData(oldSubjectsData, group.getLastCheckDate());
                        else {
                            actualSemester = newSemester;
                            newSubjectsData = lstuParser.getSubjectsDataFirstTime(actualSemester);
                        }
                        lstuAuthService.logout();
                        groupsRepository.updateSubjectsData(group.getName(), newSubjectsData, checkDate);
                        group.setLastCheckDate(checkDate);

                        String report;
                        if (actualSemester.equals(newSemester))
                            report = ReportUtils.getSubjectsData(
                                    Utils.removeOldSubjectsDocuments(oldSubjectsData, newSubjectsData),
                                    group.getNextCheckDate());
                        else
                            report = "–î–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—Ö–æ–¥—è—Ç –∏–∑ —Å–µ–º–µ—Å—Ç—Ä–∞: " + newSemester + "\n" +
                                    ReportUtils.getSubjectsData(newSubjectsData, group.getNextCheckDate());

                        if (!report.startsWith("–ù–µ—Ç –Ω–æ–≤–æ–π")) {
                            final var finalReport = "–ü–ª–∞–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:\n" + report;
                            vkBotService.sendLongMessageTo(group.getUsers(), finalReport);
                        } else {
                            if (loggedUser.isAlwaysNotify())
                                vkBotService.sendMessageTo(loggedUser.getId(), report);
                        }
                    }
                }
                catch (InterruptedException e) {
                    break;
                }
                catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        private static boolean isSilentTime (Group group, int nowHour) {
            final int silentModeStart = group.getSilentModeStart();
            final int silentModeEnd = group.getSilentModeEnd();

            if (silentModeStart < silentModeEnd) {
                return silentModeStart <= nowHour && nowHour <= silentModeEnd;

            } else if (silentModeStart > silentModeEnd) {
                return silentModeStart <= nowHour || nowHour <= silentModeEnd;

            } else return true;
        }
    }

    public static void main (String[] args)
            throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeySpecException {
        cipherService = CipherService.getInstance();

        actualSemester = Utils.getNewScannedSemesterName();
        vkBotService.setOnline(true);
        fillGroupNameByUserId();

        final var plannedSubjectsDataUpdate = new PlannedSubjectsDataUpdate();
        plannedSubjectsDataUpdate.start();

        runCycle();
        vkBotService.setOnline(false);
        plannedSubjectsDataUpdate.interrupt();
        vkBotService.sendMessageTo(ADMIN_VK_ID, "WARNING: App closed");
    }

    private static void fillGroupNameByUserId () {
        for (Group group : groupsRepository.findAllUsersOfGroups()) {
            if (!group.isLoggedBefore())
                continue;

            final var groupName = group.getName();
            group.getUsers()
                    .forEach(userId -> groupNameByUserId.put(userId, groupName));
            group.getLoginWaitingUsers()
                    .forEach(userId -> groupNameByUserId.put(userId, groupName));
        }
    }

    private static void runCycle () {
        while (true) {
            final List<Message> messages;
            messages = vkBotService.getNewMessages();
            if (!messages.isEmpty()) {
                for (Message message : messages) {
                    final Integer userId = message.getFromId();

                    if (userId > 0) {
                        try {
                            executeBotDialog(userId, message.getText());
                        } catch (Exception e) {
                            vkBotService.sendMessageTo(userId, "–Ø –Ω–µ –ø–æ–Ω—è–ª —Ç–µ–±—è –∏–ª–∏ –æ—à–∏–±—Å—è —Å–∞–º");
                            e.printStackTrace();
                        }
                    }
                }
            }
        }
    }

    private static void executeBotDialog (Integer userId, String messageText) {
        messageText = Utils.translateFromEnglishKeyboardLayoutIfNeeds(messageText);

        final var groupNameMatcher =
                groupNamePatternOnlyUpperCase.matcher(messageText.toUpperCase());
        if (groupNameMatcher.find()) {
            newUserGroupCheck(userId, messageText, groupNameMatcher);
            return;

        } else if (messageText.startsWith("–•–æ—á—É –≤–æ–π—Ç–∏ –≤ –õ–ö")) {
            onLoginMessages(userId, groupNameByUserId.get(userId), messageText);
            return;
        }

        if (!groupNameByUserId.containsKey(userId)) {
            vkBotService.sendMessageTo(userId,
                    "–ù–∞–ø–∏—à–∏ –∏–∑ –∫–∞–∫–æ–π —Ç—ã –≥—Ä—É–ø–ø—ã (—Ç–∞–∫ –∂–µ, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –õ–ö). –ù–∞–ø—Ä–∏–º–µ—Ä:\n" +
                            "–Ø –∏–∑ –ü–ò-19-1");
            return;
        }

        final var groupName = groupNameByUserId.get(userId);
        messageText = messageText.toLowerCase();

        final var optionalGroup = groupsRepository.findByGroupName(groupName);
        
        switch (messageText) {
            case "—è –≥–æ—Ç–æ–≤ –Ω–∞ –≤—Å–µ —Ä–∞–¥–∏ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã!":
                if (optionalGroup.map(Group::isNotLoggedNow).orElse(true)) {
                    vkBotService.unsetKeyboard();
                    vkBotService.sendMessageTo(userId,
                            "–•–æ—Ä–æ—à–æ, —Å–º–µ–ª—å—á–∞–∫. –ü–∏—à–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤–æ—Ç —Ç–∞–∫ " +
                                    AUTH_COMMAND);
                } else
                    groupAlreadyRegisteredMessage(userId);
                return;

            case "–ª—É—á—à–µ —Å–∫–∞–∂—É –¥—Ä—É–≥–æ–º—É":
                if (optionalGroup.map(Group::isNotLoggedNow).orElse(true)) {
                    vkBotService.unsetKeyboard();
                    groupNameByUserId.remove(userId);
                    vkBotService.sendMessageTo(userId,
                            "–•–æ—Ä–æ—à–æ. –ù–∞–ø–∏—à–∏ –º–Ω–µ, –∫–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ –∏–∑ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –∑–∞–π–¥–µ—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—è");
                } else
                    groupAlreadyRegisteredMessage(userId);
                return;

            case "—è –æ—à–∏–±—Å—è –ø—Ä–∏ –≤–≤–æ–¥–µ –≥—Ä—É–ø–ø—ã":
                if (optionalGroup.map(group -> group.getUsers().contains(userId)).orElse(false)) {
                    vkBotService.sendMessageTo(userId, "–ù–∞–ø–∏—à–∏ \"–ó–∞–±—É–¥—å –º–µ–Ω—è\", —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–π—Ç–∏ –≤ –º–µ–Ω—è");
                } else {
                    vkBotService.unsetKeyboard();
                    groupNameByUserId.remove(userId);
                    vkBotService.sendMessageTo(userId,
                            "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –≥—Ä—É–ø–ø—ã (—Ç–∞–∫ –∂–µ, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –õ–ö). –ù–∞–ø—Ä–∏–º–µ—Ä:\n" +
                                    "–Ø –∏–∑ –ü–ò-19-1");
                }
                return;
            default: break;
        }

        final var group = optionalGroup.get();
        final LoggedUser loggedUser = group.getLoggedUser();

        Integer subjectIndex = Utils.tryParseSubjectIndex(messageText);
        if (subjectIndex != null) {
            getActualSubjectDataMessage(userId, group, subjectIndex);
            return;

        } else if (messageText.startsWith("–∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ ")) {
            final var minutes = Long.parseLong(messageText.substring(21));
            if (loggedUser.equals(userId)) {
                if (10 <= minutes && minutes <= 20160) {
                    final long newUpdateInterval = minutes * 60 * 1000;
                    groupsRepository.updateField(groupName,"updateInterval", newUpdateInterval);
                    vkBotService.sendMessageTo(userId, "–ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω");
                    group.setUpdateInterval(newUpdateInterval);
                    nextUpdateDateMessage(userId, group.getNextCheckDate());
                } else
                    vkBotService.sendMessageTo(userId, "–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–∫–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
            } else
                userInsufficientPermissionsMessage(userId);
            return;

        } else if (messageText.startsWith("—Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º —Å ")) { // –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º —Å n –ø–æ k
            final String[] strings = messageText.split(" ");
            final var startHour = Integer.parseInt(strings[3]);
            final var endHour = Integer.parseInt(strings[5]);
            if (! (0 <= startHour && startHour <= 23 && 0 <= endHour && endHour <= 23)) {
                vkBotService.sendMessageTo(userId, "–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞");
            } else {
                groupsRepository.updateSilentMode(groupName, startHour, endHour);
                vkBotService.sendMessageTo(userId, "–í—Ä–µ–º—è —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏–∑–º–µ–Ω–µ–Ω–æ");
            }
            return;
        }

        switch (messageText) {
            case "–ø—Ä–µ–¥–º–µ—Ç—ã":
                vkBotService.sendMessageTo(userId, ReportUtils.getSubjectsNames(group.getSubjectsData()));
                break;

            case "–∫–æ–º–∞–Ω–¥—ã":
                vkBotService.sendMessageTo(userId,
                        ButtonsCreator.getCommandsKeyboard(userId, group.getLoggedUser()),
                        getUserCommands(userId, group));
                break;

            case "–±–µ–∑ –ø—É—Å—Ç—ã—Ö –æ—Ç—á–µ—Ç–æ–≤":
                changeLoggedUserNotifying(userId, group, false);
                break;

            case "—Å –ø—É—Å—Ç—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏":
                changeLoggedUserNotifying(userId, group, true);
                break;

            case "–∑–∞–±—É–¥—å –º–µ–Ω—è":
                if (loggedUser.equals(userId))
                    vkBotService.sendMessageTo(userId,
                            "‚û° –≠—Ç–∞ –æ–ø—Ü–∏—è –ø–æ–ª–µ–∑–Ω–∞, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞, " +
                                    "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –µ—Å–ª–∏ —è —Ç–µ–±–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω. " +
                                    "–ü–æ—Å–ª–µ —Ç–≤–æ–µ–≥–æ —É—Ö–æ–¥–∞ –∫–æ–º—É-—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–∫–∞–∑–∞—Ç—å –º–Ω–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç —Å–≤–æ–µ–≥–æ –õ–ö, " +
                                    "–µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ–π. " +
                                    "‚û° –ï—Å–ª–∏ —Ç—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—Å–µ –¥–µ–ª–∞–µ—à—å, —Ç–æ –Ω–∞–ø–∏—à–∏:\n" +
                                    "–Ø —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á—É, —á—Ç–æ–±—ã —Ç—ã –∑–∞–±—ã–ª –º–µ–Ω—è");
                else
                    vkBotService.sendMessageTo(userId,
                            "‚û° –≠—Ç–∞ –æ–ø—Ü–∏—è –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–∞ —Ç–µ–±–µ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã –ø–æ—Å–ª–µ —Ç–æ–≥–æ, " +
                                    "–∫–∞–∫ —è –∑–∞–±—ã–ª –¥—Ä—É–≥–æ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã, " +
                                    "–∏–ª–∏ –µ—Å–ª–∏ —è —Ç–µ–±–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω. \n" +
                                    "‚û° –ï—Å–ª–∏ —Ç—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—Å–µ –¥–µ–ª–∞–µ—à—å, —Ç–æ –Ω–∞–ø–∏—à–∏:\n" +
                                    "–Ø —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á—É, —á—Ç–æ–±—ã —Ç—ã –∑–∞–±—ã–ª –º–µ–Ω—è");
                break;

            case "—è —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á—É, —á—Ç–æ–±—ã —Ç—ã –∑–∞–±—ã–ª –º–µ–Ω—è":
                vkBotService.unsetKeyboard();
                if (loggedUser.equals(userId)) {
                    vkBotService.sendMessageTo(userId,
                            "–•–æ—Ä–æ—à–æ. –†–µ–∫–æ–º–µ–Ω–¥—É—é —Ç–µ–±–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–∞—Ä–æ–ª—å –≤ –õ–ö (http://lk.stu.lipetsk.ru).\n" +
                                    "–Ø —Ç–µ–±—è –∑–∞–±—ã–ª. \uD83D\uDC4B\uD83C\uDFFB");
                    groupsRepository.removeLoggedUser(groupName, loggedUser.getId());

                } else
                    vkBotService.sendMessageTo(userId,"–•–æ—Ä–æ—à–æ. –Ø —Ç–µ–±—è –∑–∞–±—ã–ª. \uD83D\uDC4B\uD83C\uDFFB");
                groupNameByUserId.remove(userId);
                break;

            default:
                vkBotService.sendMessageTo(userId, "–Ø –Ω–µ –ø–æ–Ω—è–ª —Ç–µ–±—è");
                break;
        }
    }

    private static void newUserGroupCheck (Integer userId, String messageText, Matcher groupNameMatcher) {
        if (groupNameByUserId.containsKey(userId)) {
            vkBotService.sendMessageTo(userId, "–Ø —É–∂–µ –∑–Ω–∞—é, —á—Ç–æ —Ç—ã –∏–∑ " + groupNameByUserId.get(userId));
            return;
        }

        final String groupName = messageText.substring(groupNameMatcher.start(), groupNameMatcher.end());
        groupNameByUserId.put(userId, groupName);

        final var optionalGroup = groupsRepository.findByGroupName(groupName);
        if (optionalGroup.map(Group::isLoggedBefore).orElse(false)) {
            if (optionalGroup.map(Group::isNotLoggedNow).orElse(false)) {
                vkBotService.sendMessageTo(userId,
                        "–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –±—ã–ª —á–µ–ª–æ–≤–µ–∫, –≤–æ—à–µ–¥—à–∏–π –æ—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏, –Ω–æ —Ç–µ–ø–µ—Ä—å –µ–≥–æ –Ω–µ—Ç. " +
                                "–¢—ã —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å –∏–º?\n");
                newUserMessage(userId);
            } else {
                Group group = optionalGroup.get();
                vkBotService.sendMessageTo(userId, "–û, —è –∑–Ω–∞—é —ç—Ç—É –≥—Ä—É–ø–ø—É!");
                groupsRepository.addUserTo(group.getName(), "users", userId);
                newUserSubjectsListMessage(userId, group);
            }
        } else {
            vkBotService.sendMessageTo(userId, "–Ø –Ω–µ –∑–Ω–∞—é –≥—Ä—É–ø–ø—ã " + groupName);
            newUserMessage(userId);
        }

    }

    private static void newUserMessage (Integer userId) {
        vkBotService.sendMessageTo(userId, ButtonsCreator.KEYBOARD_1,
                "‚û° –ú–Ω–µ –Ω—É–∂–Ω—ã —Ç–≤–æ–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é " +
                        "–¥–ª—è —Ç–µ–±—è –∏ —Ç–≤–æ–∏—Ö –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–æ–≤.\n" +
                        "–ú–æ–∂–µ—à—å –º–Ω–µ –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è ;-)\n" +
                        "‚û° –ï—Å–ª–∏ —Ç—ã –º–Ω–µ –Ω–µ –¥–æ–≤–µ—Ä—è–µ—à—å, —Ç–æ –ø–æ–∑–≤–æ–ª—å –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –∏–∑ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã. " +
                        "–û–±–µ—â–∞—é –Ω–µ –ø–∏—Å–∞—Ç—å —Ç–µ–±–µ –∫–æ–≥–¥–∞ –Ω–µ –Ω–∞–¥–æ.\n\n" +
                        "‚û° –í—Å–µ –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏ –≤ –≥—Ä—É–ø–ø–µ:\nhttps://vk.com/dorimelk\n" +
                        "–¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –∏–∑—É—á–∏—Ç—å –º–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ:\nhttps://github.com/Terqaz/LKBot\n" +
                        "–ò –∏–Ω–æ–≥–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –∑–∞ –ø–æ–º–æ—â—å—é:\nhttps://vk.com/terqaz");
    }

    private static void newUserSubjectsListMessage (Integer userId, Group group) {
        vkBotService.sendMessageTo(userId,
                "–¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–±–µ –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –õ–ö –ø–æ –¥–∞–Ω–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º " +
                        "(–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ " + Utils.formatDate(group.getLastCheckDate()) + "):\n" +
                        ReportUtils.getSubjectsNames(group.getSubjectsData()));

        vkBotService.sendMessageTo(userId, ButtonsCreator.getCommandsKeyboard(userId, group.getLoggedUser()),
                "–¢–∞–∫–∂–µ —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:\n" + getUserCommands(userId, group));
    }

    private static String getUserCommands (Integer userId, Group group) {
        final LoggedUser loggedUser = group.getLoggedUser();

        if (loggedUser.equals(userId))
            return BASIC_COMMANDS +
                    "\nüî∂ –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–π—á–∞—Å —Ä–∞–∑ –≤ " +
                    group.getUpdateInterval() / 60000 + " –º–∏–Ω—É—Ç):\n" + // –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ
                    "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ n (n - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç [10, 20160])\n"
                    +
                    "üî∂ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞ (—Å–µ–π—á–∞—Å —Å " +
                    group.getSilentModeStart() + " –¥–æ " + group.getSilentModeEnd() + " —á–∞—Å–æ–≤):\n" +
                    "–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º —Å n –ø–æ k (–≤–º–µ—Å—Ç–æ n –∏ k —á–∏—Å–ª–∞ [0, 23])\n"
                    +
                    (loggedUser.isAlwaysNotify() ?
                            "üî∂ –ù–µ –ø–∏—Å–∞—Ç—å —Ç–µ–±–µ, –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n–ë–µ–∑ –ø—É—Å—Ç—ã—Ö –æ—Ç—á–µ—Ç–æ–≤\n" :
                            "üî∂ –ü–∏—Å–∞—Ç—å —Ç–µ–±–µ, –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n–° –ø—É—Å—Ç—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏");

        else return BASIC_COMMANDS;
    }

    private static void groupAlreadyRegisteredMessage (Integer userId) {
        vkBotService.sendMessageTo(userId,
                "–û–π, –ø–æ—Ö–æ–∂–µ —Ç—ã –æ–ø–æ–∑–¥–∞–ª! –≠—Ç—É –≥—Ä—É–ø–ø—É —É–∂–µ —É—Å–ø–µ–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å.");
    }

    private static void changeLoggedUserNotifying (Integer userId, Group group, boolean isAlwaysNotify) {
        if (group.getLoggedUser().equals(userId)) {
            groupsRepository.updateField(group.getName(), "loggedUser.alwaysNotify", isAlwaysNotify);
            group.getLoggedUser().setAlwaysNotify(isAlwaysNotify);
            vkBotService.sendMessageTo(userId,
                            ButtonsCreator.getCommandsKeyboard(userId, group.getLoggedUser()),
                    "–•–æ—Ä–æ—à–æ");
        } else
            userInsufficientPermissionsMessage(userId);
    }

    private static void nextUpdateDateMessage (Integer userId, Date nextCheckDate) {
        nextUpdateDateMessage(Collections.singletonList(userId), nextCheckDate);
    }

    private static void nextUpdateDateMessage (Collection<Integer> userIds, Date nextCheckDate) {
        vkBotService.sendMessageTo(userIds, ReportUtils.getNextUpdateDateText(nextCheckDate));
    }

    private static void userInsufficientPermissionsMessage (Integer userId) {
        vkBotService.sendMessageTo(userId,
                "–Ø —Ä–∞–∑—Ä–µ—à–∞—é —ç—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫—É, –≤–æ—à–µ–¥—à–µ–º—É –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã");
    }

    private static void getActualSubjectDataMessage (Integer userId, Group group, Integer subjectIndex) {
        final LoggedUser loggedUser = group.getLoggedUser();
        if (!lstuAuthService.login(cipherService.decrypt(loggedUser.getAuthData()))) {
            repeatLoginFailedMessages(userId, group);
            return;
        }

        final var optionalSubjectData = group.getSubjectsData().stream()
                .filter(subjectData1 -> subjectData1.getId() == subjectIndex)
                .findFirst();
        if (optionalSubjectData.isEmpty()) {
            vkBotService.sendMessageTo(userId, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞");
            return;
        }
        final var oldSubjectData = optionalSubjectData.get();

        SubjectData newSubjectData = lstuParser.getNewSubjectData(
                oldSubjectData.getName(), oldSubjectData.getLocalUrl(), group.getLastCheckDate());
        lstuAuthService.logout();

        newSubjectData.setId(subjectIndex);
        newSubjectData.getDocumentNames()
                .removeAll(oldSubjectData.getDocumentNames());

        if (newSubjectData.isNotEmpty()) {
            vkBotService.sendLongMessageTo(userId,
                    ReportUtils.getSubjectsData(List.of(newSubjectData), null));
        } else {
            vkBotService.sendMessageTo(userId,
                    "–ù–µ—Ç –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É " + newSubjectData.getName());
        }
    }

    private static void newGroupLoginFailedMessages (Integer userId) {
        vkBotService.sendMessageTo(userId,
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. \n" +
                "–õ–∏–±–æ —Ç–≤–æ–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, –ª–∏–±–æ —è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Ö –ø—Ä–æ—á–∏—Ç–∞–ª");
    }

    private static void repeatLoginFailedMessages (Integer userId, Group group) {
        if (!group.getLoggedUser().equals(userId)) {
            vkBotService.sendMessageTo(userId,
                    "‚û° –ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã. " +
                            "–ß–µ–ª–æ–≤–µ–∫, –≤–æ—à–µ–¥—à–∏–π –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ–π –ø–∞—Ä–æ–ª—å –≤ –õ–ö –∏ –Ω–µ —Å–∫–∞–∑–∞–ª –º–Ω–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å. " +
                            "–Ø —Å–∫–∞–∂—É –µ–º—É –æ–± —ç—Ç–æ–º —Å–∞–º.");
            groupsRepository.addUserTo(group.getName(), "loginWaitingUsers", userId);
        }
        vkBotService.sendMessageTo(group.getLoggedUser().getId(),
                "‚û° –ü–æ—Ö–æ–∂–µ —Ç—ã –∑–∞–±—ã–ª —Å–∫–∞–∑–∞—Ç—å –º–Ω–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –õ–ö." +
                        "–°–∫–∞–∂–∏ –º–Ω–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ —Ç–∞–∫ " +
                        AUTH_COMMAND);
    }

    private static void onLoginMessages (Integer userId, @NonNull String groupName, String messageText) {
        final String[] chunks = messageText.split("\n");
        String login = chunks[1];
        String password = chunks[2];

        vkBotService.sendMessageTo(userId, "–ü—Ä–æ–±—É—é –∑–∞–π—Ç–∏ –≤ —Ç–≤–æ–π –õ–ö...");
        if (!lstuAuthService.login(new AuthenticationData(login, password))) {
            newGroupLoginFailedMessages(userId);
            return;
        }
        //vkBotService.deleteLastMessage(message);

        groupName = actualizeGroupName(userId, groupName);
        var optionalGroup = groupsRepository.findByGroupName(groupName);
        if (optionalGroup.isPresent()) {
            final var oldGroup = optionalGroup.get();
            if (oldGroup.isLoggedBefore()) {
                if (oldGroup.getLoggedUser().equals(userId)) {
                    groupsRepository.updateAuthInfo(
                            oldGroup.getName(),
                            new LoggedUser(userId, cipherService.encrypt(login, password), true));

                    groupsRepository.moveLoginWaitingUsersToUsers(oldGroup.getName());
                    vkBotService.sendMessageTo(oldGroup.getLoginWaitingUsers(),
                            "–ß–µ–ª–æ–≤–µ–∫ –∏–∑ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –æ–±–Ω–æ–≤–∏–ª –ø–∞—Ä–æ–ª—å –æ—Ç –õ–ö. ");
                } else
                    groupAlreadyRegisteredMessage(userId);
            }
        } else {
            newGroupLoggedMessages(userId, groupName, login, password);
            lstuAuthService.logout();
        }
    }

    private static String actualizeGroupName (Integer userId, String groupName) {
        final var optionalLkGroupName = lstuParser.getGroupName();
        if (optionalLkGroupName.isPresent()) {
            final var lkGroupName = optionalLkGroupName.get();
            if (!lkGroupName.equals(groupName)) {
                vkBotService.sendMessageTo(userId,
                        "\uD83D\uDD34 –Ø –ø–æ–º–µ–Ω—è–ª –∏–º—è –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Ç–æ–±–æ–π –≥—Ä—É–ø–ø—ã "+ groupName +" –Ω–∞: "+lkGroupName+
                                ", —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π. \uD83D\uDD34");
                groupNameByUserId.replace(userId, lkGroupName);
                groupName = lkGroupName;
            }
        }
        return groupName;
    }

    private static void newGroupLoggedMessages (Integer userId, @NonNull String groupName, String login, String password) {
        vkBotService.sendMessageTo(userId, "–£—Ä–∞. –¢–µ–ø–µ—Ä—å —è –ø–æ—Ö–∏—â—É –≤—Å–µ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)");
        vkBotService.sendMessageTo(userId,
                "–û–π, –∏–∑–≤–∏–Ω–∏, —Å–ª—É—á–∞–π–Ω–æ –≤—ã—Ä–≤–∞–ª–æ—Å—å)\n" +
                        "‚û° –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∏ —Ç–≤–æ–∏–º –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –∏–∑ –õ–ö. " +
                        "–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∑–≤–∞—Ç—å –∏—Ö –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π. " +
                        "–ù–æ –ø–æ–∑–≤–æ–ª—å —è —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—é —Ç–≤–æ–π –õ–ö...");

        List<SubjectData> newSubjectsData = lstuParser.getSubjectsDataFirstTime(actualSemester);
        final var newGroup = new Group(groupName)
                .setLoggedUser(new LoggedUser(userId, cipherService.encrypt(login, password), true))
                .setSubjectsData(newSubjectsData)
                .setLastCheckDate(new Date());
        newGroup.getUsers().add(userId);

        groupsRepository.insert(newGroup);
        newUserSubjectsListMessage(userId, newGroup);
        vkBotService.sendLongMessageTo(userId, "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: \n" +
                ReportUtils.getSubjectsData(newSubjectsData, newGroup.getNextCheckDate()));
    }


    // TODO –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    //  —Ñ—É–Ω–∫—Ü–∏—è: –Ω–∞–ø–æ–º–Ω–∏ –∏–º–µ–Ω–∞ –∏ –æ—Ç—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    //  –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ –∏ –ø–æ—Ö–≤–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
    //  –ó–∞—à–µ–¥—É–ª–∏—Ç—å –±–æ—Ç–∞ –Ω–∞ —Å–æ–Ω —Å 23 –ø–æ 6 (–ø–æ–∫–∞ —á—Ç–æ –Ω–µ –≤—ã—à–ª–æ)
    //  –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—Ö–æ–¥–∞ (–ø–æ–∫–∞ —á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —Ö–æ—Ç—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫–∞–º –º–æ–∂–Ω–æ)

    // TODO –î–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±–æ—Ç–∞:
    //  –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
    //  –¥–æ–±–∞–≤–∏—Ç—å –≤—Ö–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥
    //  –¥–æ–±–∞–≤–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–∫ –ø–æ –≥—Ä—É–ø–ø–∞–º –ø—Ä–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    //  –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ª–∫ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
}
